#####################
# Smali ABNF grammar
# Author: Dmitry Vorobiev
# Naming conventions:
# dirXXX - smali directives .XXX
# classXXX - class entity (field, method etc)
# methodXXX - method entitiy (directive lines)
# codeXXX - piece of code
# cmdXXX - smali command with parameters and optional comment
#####################

$include "basic.abnf";

#####COMMON RULES#####
padding = 1*(SP / HTAB);
optPadding = [padding];
widePadding = 1*(padding / CRLF);
optWidePadding = [widePadding];
listSeparator = *padding COMMA *padding;
escSymbol = ALPHA / DIGIT / SP / %x21 / %x5c %x22 / %x23-2f / %x3a-40 / %x5b / %x5c %x5c / %x5d-60 / %x7b-7e / %x5c %x72 / %x5c %x6e / %x5c %x74;
#zhw
#qualifier = (ALPHA / UNDERSCORE) *(ALPHA / DIGIT / UNDERSCORE);
qualifier = 1*(ALPHA / DIGIT / UNDERSCORE / SUB);
#zhw
#className = %x4c qualifier *(%x2f qualifier) ["$" qualifier] SEMICOLON;
className = %x4c (qualifier / "$") *(%x2f (qualifier / "$")) *("$" /  qualifier) SEMICOLON;
commentSequence = %x23 *(padding / VCHAR);
comment = optPadding commentSequence CRLF;
emptyLine = optPadding CRLF;
skipLine = comment / emptyLine;
fileName = QUOT *(ALPHA / DIGIT) DOT *(ALPHA / DIGIT) QUOT;
accessMode = "public" / "private" / "protected" / "static" / "final" / "abstract" / "synthetic" / "enum" / "annotation" / "declared-synchronized" / "bridge";
interfaceMode = "interface";
type = "V" / "Z" / "B" / "S" / "C" / "I" / "J" / "F" / "D" / className / "[" type;
boolValue = "true" / "false";
intDecValue = [%x2d] 1*DIGIT;
intHexValue = [%x2d] %x30 %x78 1*HEXDIG;
intValue = intHexValue / intDecValue;
strValue = QUOT *escSymbol QUOT;
value = boolValue / intValue / strValue;
codeLabel = COLON qualifier;
codeRegisterP = "p" intDecValue;
codeRegisterP64 = "p" intDecValue;
codeRegisterV = "v" intDecValue;
codeRegisterV64 = "v" intDecValue;
codeRegisterVDst = "v" intDecValue;
codeRegisterV64Dst = "v" intDecValue;
codeRegister = codeRegisterP / codeRegisterV;
codeRegister64 = codeRegisterP64 / codeRegisterV64;
codeRegisterRet = codeRegisterP / codeRegisterV;
codeRegisterRet64 = codeRegisterP64 / codeRegisterV64;
codeRegisterGroup = "{" optPadding (codeRegisterP / codeRegisterV) optPadding *(COMMA optPadding (codeRegisterP / codeRegisterV) optPadding) "}";

#####SMALI DIRECTIVE RULES#####
dirAnnotation = ".annotation";
dirClass = ".class";
dirEnd = ".end";
dirEndAnnotation = dirEnd padding "annotation";
dirEndField = dirEnd padding "field";
dirEndMethod = dirEnd padding "method";
dirEndSubannotation = dirEnd padding "subannotation";
dirImplements = ".implements";
dirField = ".field";
dirLocal = ".local";
dirMethod = ".method";
dirRegisters = ".registers";
dirSubannotation = ".subannotation";
dirSuper = ".super";
dirSource = ".source";

dirArrayData = ".array-data";
dirEndArrayData = dirEnd optPadding "array-data";

dirSparseswitch = ".sparse-switch";
dirEndSparseswitch = dirEnd padding "sparse-switch";

#####SMALI GENERAL RULES#####
smali = classHeader *(classField / skipLine) *(classMethod / skipLine);
todoStubLine = *(VCHAR / padding);

#####SMALI HEADER RULES#####
classHeader = *skipLine classClass *skipLine classSuper *skipLine [classSource] *skipLine *classImplements *skipLine;

#class directive statements
classClass = optPadding dirClass padding *((accessMode / interfaceMode) padding) optPadding className optPadding CRLF;
classSuper = optPadding dirSuper padding className optPadding CRLF;
classSource = optPadding dirSource padding fileName optPadding CRLF;
classImplements = optPadding dirImplements padding className optPadding CRLF;

#method directive statements
methodLocals = optPadding ".locals" padding intValue optPadding CRLF;
methodParam = optPadding ".parameter" [padding strValue] optPadding CRLF;
methodPrologue = optPadding ".prologue" optPadding CRLF;
methodLine = optPadding ".line" padding intValue optPadding CRLF;
methodRegisters = optPadding ".registers" padding intValue optPadding CRLF;
methodLocal = optPadding ".local" padding todoStubLine CRLF;

annotation = optPadding dirAnnotation padding annotationVisibility padding className optPadding CRLF [annotationBody] optPadding dirEndAnnotation optPadding CRLF;
annotationVisibility = "build" / "system" / "runtime";
annotationBody = optPadding "value" optPadding "=" optWidePadding "{" [optWidePadding strValue optPadding *(COMMA optWidePadding strValue optWidePadding)] optWidePadding "}" optWidePadding;


#####SMALI FIELD RULES#####
classFieldName = qualifier;
classFieldType = type;
classField = optPadding dirField padding *(accessMode padding) classFieldName COLON classFieldType optPadding [EQ optPadding value] optPadding CRLF [dirEndField optPadding CRLF];

array = arrayHead *arrayBody arrayTail;
arrayHead = optPadding dirArrayData optPadding [value] optPadding CRLF;
arrayValue = intValue ["t" / "x" / "d" / "b"];
arrayBody = *(padding / arrayValue)  CRLF;
arrayTail = optPadding  dirEndArrayData optPadding CRLF;

switch = optPadding "packed-switch" optPadding value listSeparator codeLabel optPadding CRLF;
packedswitch =  [optPadding ".end"] optPadding [ "packed-switch" / (".packed-switch" optPadding value) ] optPadding CRLF;

#0x1 -> :sswitch_7
SparseswitchBody = *(optPadding intValue optPadding "->" optPadding codeLabel optPadding CRLF);
Sparseswitch = optPadding dirSparseswitch optPadding CRLF  SparseswitchBody optPadding dirEndSparseswitch optPadding CRLF;

#.catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_0
#.catchall {:try_start_1 .. :try_end_1} :catchall_1
catchClause = BRACE_PRE optPadding codeLabel  optPadding DOT DOT optPadding codeLabel optPadding BRACE_POS optPadding codeLabel optPadding CRLF;
catch = optPadding ".catch" optPadding className optPadding catchClause;
catchall = optPadding ".catchall" optPadding catchClause;

#####SMALI METHOD RULES#####
classMethodName = qualifier;
classMethod = optPadding dirMethod padding *(accessMode padding) (classConstructorName / classMethodName) optPadding classMethodProto optPadding CRLF methodBody optPadding dirEndMethod optPadding CRLF;
classConstructorName = "constructor" padding smaliConstructorName;
classMethodProto = %x28 *type %x29 type;
methodBody = *skipLine [methodLocals] *skipLine [methodRegisters] *(methodParam / annotation / skipLine) [methodPrologue] *(methodLine / methodLocal / cmdAny / label / catch / catchall / switch / packedswitch / Sparseswitch / array / skipLine);

label = optPadding codeLabel optPadding [commentSequence] CRLF;



smaliConstructorName = ("<init>" / "<clinit>");
smaliClassRef = className;
smaliFieldRef = className "->" qualifier COLON type;
smaliMethodRef = className "->" (smaliConstructorName / qualifier) classMethodProto;

$include "commands.abnf";
